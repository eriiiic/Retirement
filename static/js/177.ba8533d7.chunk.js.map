{"version":3,"file":"static/js/177.ba8533d7.chunk.js","mappings":"mBAKO,IAAKA,EAAiB,SAAjBA,GAAiB,OAAjBA,EAAiB,8CAAjBA,EAAiB,0DAAjBA,EAAiB,wCAAjBA,EAAiB,oDAAjBA,EAAiB,4CAAjBA,EAAiB,0DAAjBA,EAAiB,sCAAjBA,EAAiB,gCAAjBA,EAAiB,wCAAjBA,EAAiB,kCAAjBA,EAAiB,cAAjBA,CAAiB,MCF7B,MAAMC,EAAcC,KAEpBD,EAAIE,UAAaC,IACf,MAAM,KAAEC,EAAI,QAAEC,GAAYF,EAAMG,KAEhC,GAAQF,IACDL,EAAkBQ,qBACrB,IACE,MAAM,UAAEC,EAAS,cAAEC,EAAa,WAAEC,GAAeL,EAGjD,IAAIM,EAAe,IAAIH,GAED,QAAlBC,IACFE,EAAeA,EAAaC,QAAQC,GACZ,eAAlBJ,EAC0B,OAArBI,EAAMC,WACc,eAAlBL,GACmB,QAArBI,EAAMC,cAOfJ,EAAWK,KACbJ,EAAaK,MAAK,CAACC,EAAmBC,KACpC,MAAMH,EAAML,EAAWK,IAEvB,OAAIE,EAAEF,GAAOG,EAAEH,GACmB,cAAzBL,EAAWS,WAA6B,EAAI,EAEjDF,EAAEF,GAAOG,EAAEH,GACmB,cAAzBL,EAAWS,UAA4B,GAAK,EAE9C,CAAC,IAIZnB,EAAIoB,YAAY,CACdhB,KAAML,EAAkBsB,4BACxBf,KAAMK,GAEV,CAAE,MAAOW,GACPtB,EAAIoB,YAAY,CACdhB,KAAML,EAAkBwB,MACxBD,MAAOA,aAAiBE,MAAQF,EAAMG,QAAU,gBAChDnB,KAAM,MAEV,MAIAN,EAAIoB,YAAY,CACdhB,KAAML,EAAkBwB,MACxBD,MAAO,yBAAyBlB,IAChCE,KAAM,MAEZ,C","sources":["types/worker.ts","workers/scheduleDetails.worker.ts"],"sourcesContent":["import { GraphDataPoint, SortConfig, FilterPhase, TimelineWidths, CapitalComparison, StatusInfo, SummaryResult } from '../components/retirement/types';\n\n/**\n * Worker message types enum\n */\nexport enum WorkerMessageType {\n  CALCULATE_ZOOMED_DATA = 'CALCULATE_ZOOMED_DATA',\n  CALCULATE_GROWTH_PERCENTAGE = 'CALCULATE_GROWTH_PERCENTAGE',\n  ZOOMED_DATA_RESULT = 'ZOOMED_DATA_RESULT',\n  GROWTH_PERCENTAGE_RESULT = 'GROWTH_PERCENTAGE_RESULT',\n  FILTER_AND_SORT_DATA = 'FILTER_AND_SORT_DATA',\n  FILTERED_SORTED_DATA_RESULT = 'FILTERED_SORTED_DATA_RESULT',\n  CALCULATE_SUMMARY = 'CALCULATE_SUMMARY',\n  SUMMARY_RESULT = 'SUMMARY_RESULT',\n  CALCULATE_SCHEDULE = 'CALCULATE_SCHEDULE',\n  SCHEDULE_RESULT = 'SCHEDULE_RESULT',\n  ERROR = 'ERROR'\n}\n\n/**\n * Worker types\n */\nexport type WorkerType = 'capitalEvolution' | 'scheduleDetails' | 'resultsSummary';\n\n/**\n * Base interface for worker messages\n */\nexport interface WorkerMessageBase<T extends WorkerMessageType, P> {\n  type: T;\n  payload: P;\n}\n\n/**\n * Base interface for worker responses\n */\nexport interface WorkerResponseBase<T extends WorkerMessageType, D> {\n  type: T;\n  data: D;\n  error?: string;\n}\n\n/**\n * Zoomed data payload\n */\nexport interface ZoomedDataPayload {\n  graphData: GraphDataPoint[];\n  zoomStart: number;\n  zoomEnd: number;\n}\n\n/**\n * Growth percentage payload\n */\nexport interface GrowthPercentagePayload {\n  current: number;\n  initial: number;\n}\n\n/**\n * Filter and sort payload\n */\nexport interface FilterSortPayload {\n  graphData: GraphDataPoint[];\n  filteredPhase: FilterPhase;\n  sortConfig: SortConfig;\n}\n\n/**\n * Summary data payload\n */\nexport interface SummaryDataPayload {\n  graphData: GraphDataPoint[];\n}\n\n/**\n * Schedule data payload\n */\nexport interface ScheduleDataPayload {\n  graphData: GraphDataPoint[];\n}\n\n/**\n * Worker message types\n */\nexport type WorkerMessage =\n  | WorkerMessageBase<WorkerMessageType.CALCULATE_ZOOMED_DATA, ZoomedDataPayload>\n  | WorkerMessageBase<WorkerMessageType.CALCULATE_GROWTH_PERCENTAGE, GrowthPercentagePayload>\n  | WorkerMessageBase<WorkerMessageType.FILTER_AND_SORT_DATA, FilterSortPayload>\n  | WorkerMessageBase<WorkerMessageType.CALCULATE_SUMMARY, SummaryDataPayload>\n  | WorkerMessageBase<WorkerMessageType.CALCULATE_SCHEDULE, ScheduleDataPayload>;\n\n/**\n * Worker response types\n */\nexport type WorkerResponse =\n  | WorkerResponseBase<WorkerMessageType.ZOOMED_DATA_RESULT, GraphDataPoint[]>\n  | WorkerResponseBase<WorkerMessageType.GROWTH_PERCENTAGE_RESULT, string>\n  | WorkerResponseBase<WorkerMessageType.FILTERED_SORTED_DATA_RESULT, GraphDataPoint[]>\n  | WorkerResponseBase<WorkerMessageType.SUMMARY_RESULT, SummaryResult>\n  | WorkerResponseBase<WorkerMessageType.SCHEDULE_RESULT, GraphDataPoint[]>\n  | WorkerResponseBase<WorkerMessageType.ERROR, null>; ","import { WorkerMessageType } from '../types/worker';\nimport { GraphDataPoint, SortConfig, FilterPhase } from '../components/retirement/types';\n\nconst ctx: Worker = self as any;\n\nctx.onmessage = (event: MessageEvent) => {\n  const { type, payload } = event.data;\n\n  switch (type) {\n    case WorkerMessageType.FILTER_AND_SORT_DATA:\n      try {\n        const { graphData, filteredPhase, sortConfig } = payload;\n        \n        // First filter the data based on the selected phase\n        let filteredData = [...graphData];\n        \n        if (filteredPhase !== 'all') {\n          filteredData = filteredData.filter((point: GraphDataPoint) => {\n            if (filteredPhase === 'investment') {\n              return point.retirement === \"No\";\n            } else if (filteredPhase === 'retirement') {\n              return point.retirement === \"Yes\";\n            }\n            return true;\n          });\n        }\n        \n        // Then sort the data if a sort config is provided\n        if (sortConfig.key) {\n          filteredData.sort((a: GraphDataPoint, b: GraphDataPoint) => {\n            const key = sortConfig.key as keyof GraphDataPoint;\n            \n            if (a[key] < b[key]) {\n              return sortConfig.direction === 'ascending' ? -1 : 1;\n            }\n            if (a[key] > b[key]) {\n              return sortConfig.direction === 'ascending' ? 1 : -1;\n            }\n            return 0;\n          });\n        }\n        \n        ctx.postMessage({\n          type: WorkerMessageType.FILTERED_SORTED_DATA_RESULT,\n          data: filteredData\n        });\n      } catch (error) {\n        ctx.postMessage({\n          type: WorkerMessageType.ERROR,\n          error: error instanceof Error ? error.message : 'Unknown error',\n          data: null\n        });\n      }\n      break;\n\n    default:\n      ctx.postMessage({\n        type: WorkerMessageType.ERROR,\n        error: `Unknown message type: ${type}`,\n        data: null\n      });\n  }\n}; "],"names":["WorkerMessageType","ctx","self","onmessage","event","type","payload","data","FILTER_AND_SORT_DATA","graphData","filteredPhase","sortConfig","filteredData","filter","point","retirement","key","sort","a","b","direction","postMessage","FILTERED_SORTED_DATA_RESULT","error","ERROR","Error","message"],"sourceRoot":""}