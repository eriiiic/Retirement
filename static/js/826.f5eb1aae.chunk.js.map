{"version":3,"file":"static/js/826.f5eb1aae.chunk.js","mappings":"mBAKO,IAAKA,EAAiB,SAAjBA,GAAiB,OAAjBA,EAAiB,8CAAjBA,EAAiB,0DAAjBA,EAAiB,wCAAjBA,EAAiB,oDAAjBA,EAAiB,4CAAjBA,EAAiB,0DAAjBA,EAAiB,sCAAjBA,EAAiB,gCAAjBA,EAAiB,wCAAjBA,EAAiB,kCAAjBA,EAAiB,cAAjBA,CAAiB,MCF7B,MAAMC,EAAcC,KAEpBD,EAAIE,UAAaC,IACf,MAAM,KAAEC,EAAI,QAAEC,GAAYF,EAAMG,KAEhC,OAAQF,GACN,KAAKL,EAAkBQ,sBACrB,IACE,MAAM,UAAEC,EAAS,UAAEC,EAAS,QAAEC,GAAYL,EAGpCM,EAAaH,EAAUI,QAAQC,IACnC,MAAMC,EAAOD,EAAMC,KACnB,OAAOA,GAAQL,GAAaK,GAAQJ,CAAO,IAG7CV,EAAIe,YAAY,CACdX,KAAML,EAAkBiB,mBACxBV,KAAMK,GAEV,CAAE,MAAOM,GACPjB,EAAIe,YAAY,CACdX,KAAML,EAAkBmB,MACxBD,MAAOA,aAAiBE,MAAQF,EAAMG,QAAU,gBAChDd,KAAM,MAEV,CACA,MAEF,KAAKP,EAAkBsB,4BACrB,IACE,MAAM,QAAEC,EAAO,QAAEC,GAAYlB,EAIvBmB,IADqBF,EAAUC,GAAWA,EAAW,KAClBE,QAAQ,GAAK,IAEtDzB,EAAIe,YAAY,CACdX,KAAML,EAAkB2B,yBACxBpB,KAAMkB,GAEV,CAAE,MAAOP,GACPjB,EAAIe,YAAY,CACdX,KAAML,EAAkBmB,MACxBD,MAAOA,aAAiBE,MAAQF,EAAMG,QAAU,gBAChDd,KAAM,MAEV,CACA,MAEF,QACEN,EAAIe,YAAY,CACdX,KAAML,EAAkBmB,MACxBD,MAAO,yBAAyBb,IAChCE,KAAM,OAEZ,C","sources":["types/worker.ts","workers/capitalEvolution.worker.ts"],"sourcesContent":["import { GraphDataPoint, SortConfig, FilterPhase, TimelineWidths, CapitalComparison, StatusInfo, SummaryResult } from '../components/retirement/types';\n\n/**\n * Worker message types enum\n */\nexport enum WorkerMessageType {\n  CALCULATE_ZOOMED_DATA = 'CALCULATE_ZOOMED_DATA',\n  CALCULATE_GROWTH_PERCENTAGE = 'CALCULATE_GROWTH_PERCENTAGE',\n  ZOOMED_DATA_RESULT = 'ZOOMED_DATA_RESULT',\n  GROWTH_PERCENTAGE_RESULT = 'GROWTH_PERCENTAGE_RESULT',\n  FILTER_AND_SORT_DATA = 'FILTER_AND_SORT_DATA',\n  FILTERED_SORTED_DATA_RESULT = 'FILTERED_SORTED_DATA_RESULT',\n  CALCULATE_SUMMARY = 'CALCULATE_SUMMARY',\n  SUMMARY_RESULT = 'SUMMARY_RESULT',\n  CALCULATE_SCHEDULE = 'CALCULATE_SCHEDULE',\n  SCHEDULE_RESULT = 'SCHEDULE_RESULT',\n  ERROR = 'ERROR'\n}\n\n/**\n * Worker types\n */\nexport type WorkerType = 'capitalEvolution' | 'scheduleDetails' | 'resultsSummary';\n\n/**\n * Base interface for worker messages\n */\nexport interface WorkerMessageBase<T extends WorkerMessageType, P> {\n  type: T;\n  payload: P;\n}\n\n/**\n * Base interface for worker responses\n */\nexport interface WorkerResponseBase<T extends WorkerMessageType, D> {\n  type: T;\n  data: D;\n  error?: string;\n}\n\n/**\n * Zoomed data payload\n */\nexport interface ZoomedDataPayload {\n  graphData: GraphDataPoint[];\n  zoomStart: number;\n  zoomEnd: number;\n}\n\n/**\n * Growth percentage payload\n */\nexport interface GrowthPercentagePayload {\n  current: number;\n  initial: number;\n}\n\n/**\n * Filter and sort payload\n */\nexport interface FilterSortPayload {\n  graphData: GraphDataPoint[];\n  filteredPhase: FilterPhase;\n  sortConfig: SortConfig;\n}\n\n/**\n * Summary data payload\n */\nexport interface SummaryDataPayload {\n  graphData: GraphDataPoint[];\n}\n\n/**\n * Schedule data payload\n */\nexport interface ScheduleDataPayload {\n  graphData: GraphDataPoint[];\n}\n\n/**\n * Worker message types\n */\nexport type WorkerMessage =\n  | WorkerMessageBase<WorkerMessageType.CALCULATE_ZOOMED_DATA, ZoomedDataPayload>\n  | WorkerMessageBase<WorkerMessageType.CALCULATE_GROWTH_PERCENTAGE, GrowthPercentagePayload>\n  | WorkerMessageBase<WorkerMessageType.FILTER_AND_SORT_DATA, FilterSortPayload>\n  | WorkerMessageBase<WorkerMessageType.CALCULATE_SUMMARY, SummaryDataPayload>\n  | WorkerMessageBase<WorkerMessageType.CALCULATE_SCHEDULE, ScheduleDataPayload>;\n\n/**\n * Worker response types\n */\nexport type WorkerResponse =\n  | WorkerResponseBase<WorkerMessageType.ZOOMED_DATA_RESULT, GraphDataPoint[]>\n  | WorkerResponseBase<WorkerMessageType.GROWTH_PERCENTAGE_RESULT, string>\n  | WorkerResponseBase<WorkerMessageType.FILTERED_SORTED_DATA_RESULT, GraphDataPoint[]>\n  | WorkerResponseBase<WorkerMessageType.SUMMARY_RESULT, SummaryResult>\n  | WorkerResponseBase<WorkerMessageType.SCHEDULE_RESULT, GraphDataPoint[]>\n  | WorkerResponseBase<WorkerMessageType.ERROR, null>; ","import { WorkerMessageType } from '../types/worker';\nimport { GraphDataPoint } from '../components/retirement/types';\n\nconst ctx: Worker = self as any;\n\nctx.onmessage = (event: MessageEvent) => {\n  const { type, payload } = event.data;\n\n  switch (type) {\n    case WorkerMessageType.CALCULATE_ZOOMED_DATA:\n      try {\n        const { graphData, zoomStart, zoomEnd } = payload;\n        \n        // Filter data based on zoom level\n        const zoomedData = graphData.filter((point: GraphDataPoint) => {\n          const year = point.year;\n          return year >= zoomStart && year <= zoomEnd;\n        });\n\n        ctx.postMessage({\n          type: WorkerMessageType.ZOOMED_DATA_RESULT,\n          data: zoomedData\n        });\n      } catch (error) {\n        ctx.postMessage({\n          type: WorkerMessageType.ERROR,\n          error: error instanceof Error ? error.message : 'Unknown error',\n          data: null\n        });\n      }\n      break;\n\n    case WorkerMessageType.CALCULATE_GROWTH_PERCENTAGE:\n      try {\n        const { current, initial } = payload;\n        \n        // Calculate growth percentage\n        const growthPercentage = ((current - initial) / initial) * 100;\n        const formattedGrowth = growthPercentage.toFixed(2) + '%';\n\n        ctx.postMessage({\n          type: WorkerMessageType.GROWTH_PERCENTAGE_RESULT,\n          data: formattedGrowth\n        });\n      } catch (error) {\n        ctx.postMessage({\n          type: WorkerMessageType.ERROR,\n          error: error instanceof Error ? error.message : 'Unknown error',\n          data: null\n        });\n      }\n      break;\n\n    default:\n      ctx.postMessage({\n        type: WorkerMessageType.ERROR,\n        error: `Unknown message type: ${type}`,\n        data: null\n      });\n  }\n}; "],"names":["WorkerMessageType","ctx","self","onmessage","event","type","payload","data","CALCULATE_ZOOMED_DATA","graphData","zoomStart","zoomEnd","zoomedData","filter","point","year","postMessage","ZOOMED_DATA_RESULT","error","ERROR","Error","message","CALCULATE_GROWTH_PERCENTAGE","current","initial","formattedGrowth","toFixed","GROWTH_PERCENTAGE_RESULT"],"sourceRoot":""}