{"version":3,"file":"static/js/37.bbfd879c.chunk.js","mappings":"mBAKO,IAAKA,EAAiB,SAAjBA,GAAiB,OAAjBA,EAAiB,8CAAjBA,EAAiB,0DAAjBA,EAAiB,wCAAjBA,EAAiB,oDAAjBA,EAAiB,4CAAjBA,EAAiB,0DAAjBA,EAAiB,sCAAjBA,EAAiB,gCAAjBA,EAAiB,wCAAjBA,EAAiB,kCAAjBA,EAAiB,cAAjBA,CAAiB,MCF7B,MAAMC,EAAcC,KAEpBD,EAAIE,UAAaC,IACf,MAAM,KAAEC,EAAI,QAAEC,GAAYF,EAAMG,KAEhC,GAAQF,IACDL,EAAkBQ,kBACrB,IACE,MAAM,UAAEC,GAAcH,EAGhBI,EAAyB,CAC7BC,eAAgB,EAChBC,aAAc,EACdC,cAAe,EACfC,mBAAoB,EACpBC,mBAAoB,EACpBC,iBAAkB,EAClBC,iBAAkB,EAClBC,iBAAkB,GAGpB,GAAIT,GAAaA,EAAUU,OAAS,EAAG,CAErCT,EAAQC,eAAiBF,EAAU,GAAGW,QACtCV,EAAQE,aAAeH,EAAUA,EAAUU,OAAS,GAAGC,QAGvD,MAAMC,EAAkBZ,EAAUa,MAAMC,GAA+C,QAArBA,EAAMC,aACxE,GAAIH,EAAiB,CACnBX,EAAQG,cAAgBQ,EAAgBI,IAGxC,MAAMC,EAAWjB,EAAUA,EAAUU,OAAS,GAAGQ,KAC3CC,EAAiBP,EAAgBM,KACvCjB,EAAQI,mBAAqBY,EAAWE,CAC1C,CAGA,IAAIb,EAAqB,EACrBC,EAAmB,EAEvBP,EAAUoB,SAASN,IAEbA,EAAMO,iBAAmB,IAC3Bf,GAAsBQ,EAAMO,kBAI1BP,EAAMQ,iBAAmB,IAC3Bf,GAAoBO,EAAMQ,iBAC5B,IAGFrB,EAAQK,mBAAqBA,EAC7BL,EAAQM,iBAAmBA,EAG3BN,EAAQO,kBAAqBP,EAAQE,aAAeF,EAAQC,eAAiBI,EAAqBC,IACtEN,EAAQC,eAAiBI,GAAuB,IAG5E,MAAMiB,EAAQvB,EAAUU,OACpBa,EAAQ,IACVtB,EAAQQ,iBAAmBe,KAAKC,IAAKxB,EAAQE,aAAeF,EAAQC,eAAkB,EAAIqB,GAAU,EACpGtB,EAAQQ,kBAAoB,IAEhC,CAEAjB,EAAIkC,YAAY,CACd9B,KAAML,EAAkBoC,eACxB7B,KAAMG,GAEV,CAAE,MAAO2B,GACPpC,EAAIkC,YAAY,CACd9B,KAAML,EAAkBsC,MACxBD,MAAOA,aAAiBE,MAAQF,EAAMG,QAAU,gBAChDjC,KAAM,MAEV,MAIAN,EAAIkC,YAAY,CACd9B,KAAML,EAAkBsC,MACxBD,MAAO,yBAAyBhC,IAChCE,KAAM,MAEZ,C","sources":["types/worker.ts","workers/resultsSummary.worker.ts"],"sourcesContent":["import { GraphDataPoint, SortConfig, FilterPhase, TimelineWidths, CapitalComparison, StatusInfo, SummaryResult } from '../components/retirement/types';\n\n/**\n * Worker message types enum\n */\nexport enum WorkerMessageType {\n  CALCULATE_ZOOMED_DATA = 'CALCULATE_ZOOMED_DATA',\n  CALCULATE_GROWTH_PERCENTAGE = 'CALCULATE_GROWTH_PERCENTAGE',\n  ZOOMED_DATA_RESULT = 'ZOOMED_DATA_RESULT',\n  GROWTH_PERCENTAGE_RESULT = 'GROWTH_PERCENTAGE_RESULT',\n  FILTER_AND_SORT_DATA = 'FILTER_AND_SORT_DATA',\n  FILTERED_SORTED_DATA_RESULT = 'FILTERED_SORTED_DATA_RESULT',\n  CALCULATE_SUMMARY = 'CALCULATE_SUMMARY',\n  SUMMARY_RESULT = 'SUMMARY_RESULT',\n  CALCULATE_SCHEDULE = 'CALCULATE_SCHEDULE',\n  SCHEDULE_RESULT = 'SCHEDULE_RESULT',\n  ERROR = 'ERROR'\n}\n\n/**\n * Worker types\n */\nexport type WorkerType = 'capitalEvolution' | 'scheduleDetails' | 'resultsSummary';\n\n/**\n * Base interface for worker messages\n */\nexport interface WorkerMessageBase<T extends WorkerMessageType, P> {\n  type: T;\n  payload: P;\n}\n\n/**\n * Base interface for worker responses\n */\nexport interface WorkerResponseBase<T extends WorkerMessageType, D> {\n  type: T;\n  data: D;\n  error?: string;\n}\n\n/**\n * Zoomed data payload\n */\nexport interface ZoomedDataPayload {\n  graphData: GraphDataPoint[];\n  zoomStart: number;\n  zoomEnd: number;\n}\n\n/**\n * Growth percentage payload\n */\nexport interface GrowthPercentagePayload {\n  current: number;\n  initial: number;\n}\n\n/**\n * Filter and sort payload\n */\nexport interface FilterSortPayload {\n  graphData: GraphDataPoint[];\n  filteredPhase: FilterPhase;\n  sortConfig: SortConfig;\n}\n\n/**\n * Summary data payload\n */\nexport interface SummaryDataPayload {\n  graphData: GraphDataPoint[];\n}\n\n/**\n * Schedule data payload\n */\nexport interface ScheduleDataPayload {\n  graphData: GraphDataPoint[];\n}\n\n/**\n * Worker message types\n */\nexport type WorkerMessage =\n  | WorkerMessageBase<WorkerMessageType.CALCULATE_ZOOMED_DATA, ZoomedDataPayload>\n  | WorkerMessageBase<WorkerMessageType.CALCULATE_GROWTH_PERCENTAGE, GrowthPercentagePayload>\n  | WorkerMessageBase<WorkerMessageType.FILTER_AND_SORT_DATA, FilterSortPayload>\n  | WorkerMessageBase<WorkerMessageType.CALCULATE_SUMMARY, SummaryDataPayload>\n  | WorkerMessageBase<WorkerMessageType.CALCULATE_SCHEDULE, ScheduleDataPayload>;\n\n/**\n * Worker response types\n */\nexport type WorkerResponse =\n  | WorkerResponseBase<WorkerMessageType.ZOOMED_DATA_RESULT, GraphDataPoint[]>\n  | WorkerResponseBase<WorkerMessageType.GROWTH_PERCENTAGE_RESULT, string>\n  | WorkerResponseBase<WorkerMessageType.FILTERED_SORTED_DATA_RESULT, GraphDataPoint[]>\n  | WorkerResponseBase<WorkerMessageType.SUMMARY_RESULT, SummaryResult>\n  | WorkerResponseBase<WorkerMessageType.SCHEDULE_RESULT, GraphDataPoint[]>\n  | WorkerResponseBase<WorkerMessageType.ERROR, null>; ","import { WorkerMessageType } from '../types/worker';\nimport { GraphDataPoint, SummaryResult } from '../components/retirement/types';\n\nconst ctx: Worker = self as any;\n\nctx.onmessage = (event: MessageEvent) => {\n  const { type, payload } = event.data;\n\n  switch (type) {\n    case WorkerMessageType.CALCULATE_SUMMARY:\n      try {\n        const { graphData } = payload;\n        \n        // Calculate summary statistics\n        const summary: SummaryResult = {\n          initialCapital: 0,\n          finalCapital: 0,\n          retirementAge: 0,\n          retirementDuration: 0,\n          totalContributions: 0,\n          totalWithdrawals: 0,\n          growthPercentage: 0,\n          annualizedReturn: 0\n        };\n        \n        if (graphData && graphData.length > 0) {\n          // Get initial and final capital\n          summary.initialCapital = graphData[0].capital;\n          summary.finalCapital = graphData[graphData.length - 1].capital;\n          \n          // Find retirement age\n          const retirementPoint = graphData.find((point: GraphDataPoint) => point.retirement === \"Yes\");\n          if (retirementPoint) {\n            summary.retirementAge = retirementPoint.age;\n            \n            // Calculate retirement duration\n            const lastYear = graphData[graphData.length - 1].year;\n            const retirementYear = retirementPoint.year;\n            summary.retirementDuration = lastYear - retirementYear;\n          }\n          \n          // Calculate total contributions and withdrawals\n          let totalContributions = 0;\n          let totalWithdrawals = 0;\n          \n          graphData.forEach((point: GraphDataPoint) => {\n            // Use annualInvestment for contributions\n            if (point.annualInvestment > 0) {\n              totalContributions += point.annualInvestment;\n            }\n            \n            // Use annualWithdrawal for withdrawals\n            if (point.annualWithdrawal > 0) {\n              totalWithdrawals += point.annualWithdrawal;\n            }\n          });\n          \n          summary.totalContributions = totalContributions;\n          summary.totalWithdrawals = totalWithdrawals;\n          \n          // Calculate growth percentage\n          summary.growthPercentage = ((summary.finalCapital - summary.initialCapital - totalContributions + totalWithdrawals) / \n                                     (summary.initialCapital + totalContributions)) * 100;\n          \n          // Calculate annualized return (simplified)\n          const years = graphData.length;\n          if (years > 1) {\n            summary.annualizedReturn = Math.pow((summary.finalCapital / summary.initialCapital), (1 / years)) - 1;\n            summary.annualizedReturn *= 100; // Convert to percentage\n          }\n        }\n        \n        ctx.postMessage({\n          type: WorkerMessageType.SUMMARY_RESULT,\n          data: summary\n        });\n      } catch (error) {\n        ctx.postMessage({\n          type: WorkerMessageType.ERROR,\n          error: error instanceof Error ? error.message : 'Unknown error',\n          data: null\n        });\n      }\n      break;\n\n    default:\n      ctx.postMessage({\n        type: WorkerMessageType.ERROR,\n        error: `Unknown message type: ${type}`,\n        data: null\n      });\n  }\n};"],"names":["WorkerMessageType","ctx","self","onmessage","event","type","payload","data","CALCULATE_SUMMARY","graphData","summary","initialCapital","finalCapital","retirementAge","retirementDuration","totalContributions","totalWithdrawals","growthPercentage","annualizedReturn","length","capital","retirementPoint","find","point","retirement","age","lastYear","year","retirementYear","forEach","annualInvestment","annualWithdrawal","years","Math","pow","postMessage","SUMMARY_RESULT","error","ERROR","Error","message"],"sourceRoot":""}